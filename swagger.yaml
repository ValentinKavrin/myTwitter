swagger: "2.0"
info:
  description: "This my first swagger"
  version: "1.0.0"
  title: "Swagger DB"
  contact:
    email: "kavrin00@mail.ru"

tags:
- name: "auth"
- name: "post"
- name: "user"
schemes:
- "https"
- "http"
paths:
  /auth/registration:
    post:
      tags:
      - "auth"
      summary: register user
      description: registration a new user
      parameters:
      - in: header
        name: authorization
        required: true
      - in: body
        name: body
        schema:
          $ref: '#/components/registration'              
      responses:
        "201": 
          description: user register successfully
        "400": 
          description: Registration error
  /auth/login:
    post:
      tags:
      - "auth"
      summary: login user
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/components/login'              
      responses:
        "200": 
          description: user login successfully
        "400": 
          description: login error
  /api/post:
    post:
      tags:
      - "post"
      summary: Create post
      description: Create a new post
      parameters:
      - in: header
        name: authorization
        required: true
      - in: body
        name: body
        schema:
          $ref: '#/post/createPost'              
      responses:
        "400": 
          description: Create new post error
        "401":
          description: You need to log in
  /api/post/{postId}:
    get:
      tags:
      - "post"
      summary: Get one post
      description: The user gets one post and can edit it
      parameters:
      - in: header
        name: authorization
        required: true
      - in: path
        name: postId             
      responses:
        "400": 
          description: Пост не найден, возможно был удален
        "401":
          description: You need to log in
  /api/posts/{userId}:
    get:
      tags:
      - "post"
      summary: Get post by user
      description: The user gets all this post
      parameters:
      - in: header
        name: authorization
        required: true   
      - in: path
        name: userId       
      responses:
        "400": 
          description: Посты еще не были созданы
        "401":
          description: You need to log in
  /api/posts/:
    get:
      tags:
      - "post"
      summary: Get all post 
      description: The user gets all post
      parameters:
      - in: header
        name: authorization
        required: true      
      responses:
        "401":
          description: You need to log in
  /api/post/{idPost}:
    put:
      tags:
      - "post"
      summary: Update post
      description: The user can edit post
      parameters:
      - in: header
        name: authorization
        required: true   
      - in: path
        name: idPost 
      - in: body
        name: body
        schema:
          $ref: '#/post/updatePost'     
      responses:
        "200":
          description: Update post - successfully
        "401":
          description: You need to log in
  /api/post/:
    delete:
      tags:
      - "post"
      summary: Get all post 
      description: The user gets all post
      parameters:
      - in: header
        name: authorization
        required: true 
      - in: body
        name: body  
        schema:
          $ref: '#/post/deletePost'     
      responses:
        "401":
          description: You need to log in
  /api/user/{userId}:
    get:
      tags:
      - "user"
      summary: Get user 
      parameters:
      - in: header
        name: authorization
        required: true    
      - in: path
        name: userId 
      responses:
        "401":
          description: You need to log in
  /api/user:
    put:
      tags:
      - "user"
      summary: Update user
      parameters:
      - in: header
        name: authorization
        required: true  
      - in: body
        name: body
        schema:
          $ref: '#/user/updateUser'     
      responses:
        "200":
          description: Update user - successfully
        "401":
          description: You need to log in
  /api/user:
    delete:
      tags:
      - "user"
      summary: Delete user
      parameters:
      - in: header
        name: authorization
        required: true      
      responses:
        "401":
          description: You need to log in


components:
  registration:
    type: "object"
    properties:
      userName:
        type: string
      name:
        type: string
      surname:
        type: string
      password:
        type: string
  login:
    type: "object"
    properties:
      userName:
        type: string
      password:
        type: string

post:
  createPost:
    type: "object"
    properties:
      title:
        type: string
      content:
        type: string
  updatePost:
    type: "object"
    properties:
      title:
        type: string
      content:
        type: string
  deletePost:
    type: "object"
    properties:
      id:
        type: string
  
user:
  updateUser:
    type: "object"
    properties:
      name:
        type: string
      surname:
        type: string
  